// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String                   @id @default(cuid())
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  deletedAt     DateTime?
  username      String?
  email         String                   @unique
  emailVerified String?
  image         String?
  password      String?
  memberships   OrganizationMembership[]
  Account       Account[]
  Session       Session[]
}

// Account is an external account from a third-party provider in the OAuth flow.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// An Organization is the main point of entry to the application. A user can't do anything until they create or join an organization.
// A User can be a member of any number of Organizations.
model Organization {
  id        String                   @id @default(cuid())
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  deletedAt DateTime?
  name      String
  slug      String?                  @unique
  members   OrganizationMembership[]
}

// Member is a join table that links Users to Organizations.
model OrganizationMembership {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  role           OrganizationRole
}

// OrganizationRole is used for RBAC for Organization operations.
enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}
