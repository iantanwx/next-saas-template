# Task ID: 8
# Title: Preloading and TTLs: Preload the todo query in apps/web/src/app/[organization]/layout.tsx and set TTL per Zero docs
# Status: done
# Dependencies: 6
# Priority: medium
# Description: Implement query preloading in the organization layout to optimize initial page load performance and configure appropriate TTL settings according to Zero documentation.
# Details:
1. Update apps/web/src/app/[organization]/layout.tsx:
   - Import Zero query preloading utilities from packages/zero
   - Implement todo query preloading in the layout component
   - Configure preloading to occur during server-side rendering or component initialization
   - Ensure preloaded data is scoped to the current organization context

2. Configure TTL (Time To Live) settings per Zero documentation:
   - Research Zero docs for recommended TTL configurations for todo queries
   - Set appropriate cache expiration times based on data freshness requirements
   - Configure TTL for different query types (user todos, organization todos)
   - Implement cache invalidation strategies for real-time updates

3. Optimize preloading strategy:
   - Preload only essential todo data needed for initial render
   - Consider user permissions and organization membership for preloading scope
   - Implement error handling for failed preload attempts
   - Ensure preloading doesn't block critical rendering path

4. Integration with existing Zero setup:
   - Ensure preloading works with ZeroProvider context from Task 5
   - Coordinate with Zero query implementation from Task 6
   - Maintain compatibility with auth token strategy from previous tasks
<info added on 2025-08-11T23:43:32.470Z>
5. Preload related users for instant names/avatars:
   - Implement todos query preload with ttl: '5m' configuration
   - Preload organization members and their user data using z.query.organizationMembers.where('organizationId', orgId).related('user').preload({ttl:'5m'})
   - Alternative approach: preload only users referenced by current todos for a narrower dataset
   - Implement safe no-op behavior when Zero is inactive to prevent errors during fallback scenarios
   - Ensure user data preloading coordinates with todo preloading for optimal performance
   - Cache user avatar and name data with same TTL as todo data to maintain consistency
</info added on 2025-08-11T23:43:32.470Z>

# Test Strategy:
1. Test preloading functionality:
   - Verify todo query data is preloaded before component render
   - Confirm preloaded data is scoped correctly to current organization
   - Test preloading performance impact on initial page load times
   - Validate preloading works with both SSR and client-side navigation

2. Test TTL configuration:
   - Verify cache expiration behaves according to configured TTL settings
   - Test cache invalidation when todos are modified
   - Confirm stale data is refreshed appropriately
   - Test TTL behavior across different browser sessions

3. Test error handling:
   - Verify graceful fallback when preloading fails
   - Test behavior with network connectivity issues
   - Confirm error states don't break the layout rendering

4. Performance testing:
   - Measure initial page load improvements with preloading enabled
   - Test memory usage with cached preloaded data
   - Verify preloading doesn't cause unnecessary API calls

# Subtasks:
## 1. Reinstate FK constraints: todos.userId -> users.id (and related) [done]
### Dependencies: None
### Description: Restore DB FK constraints between todos and users removed for Electric/PGlite; ensures referential integrity for preloading related users.
### Details:
1) Confirm prior FK removal via git history
2) Drizzle migration: add FK todos.userId -> users.id (ON DELETE RESTRICT unless backfill needed)
3) Clean up orphans before enabling FKs
4) Validate Zero path and update tests
5) Document change


